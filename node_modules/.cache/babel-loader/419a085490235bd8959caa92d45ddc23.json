{"ast":null,"code":"var _jsxFileName = \"/Users/riya/Downloads/VSCode Projects/graphql_practice/client/src/components/Page.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Page = () => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(gql`\n        query getComment($id: ID!){\n            getComment(id: $id){\n                comment\n            }\n    }`, {\n    variables: {\n      id: \"2\"\n    }\n  });\n  const {\n    data: commentsData\n  } = useQuery(gql`\n    query getComments{\n        getComments {\n            author\n            comment\n        }\n    }`, {\n    variables: {}\n  });\n  const [mutateFunction, {\n    data: mutationData\n  }] = useMutation(gql`\n        mutation createComment($comment: String,  $author: String){\n            createComment(commentInput: {comment: $comment, author: $author}){\n                author\n                comment\n            }\n    }`, {\n    variables: {\n      comment: \"hi\",\n      author: \"Riya\"\n    }\n  });\n\n  const handleMutate = () => {\n    mutateFunction({\n      variables: {\n        comment: \"this is a comment\",\n        author: \"Riya\"\n      }\n    });\n  };\n\n  console.log(commentsData === null || commentsData === void 0 ? void 0 : commentsData.getComments); // const displayAuthor = () => {\n  //     console.log('test')\n  //     return <h1> ajdsfhskdjf</h1>\n  //     // for (let index = 0; index < commentsData?.getComments.length; index++) {\n  //     //     <h4> {commentsData?.getComments[index].author} </h4>\n  //     // }\n  // }\n  // console.log(commentsData.comment)\n  // console.log(commentsData.author)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\" \", commentsData === null || commentsData === void 0 ? void 0 : commentsData.getComments[1].author, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), JSON.stringify(commentsData), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMutate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), JSON.stringify(mutationData)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Page, \"t2eNIqR4pZMQrT3/3tYQ5QSwMmk=\", false, function () {\n  return [useQuery, useQuery, useMutation];\n});\n\n_c = Page;\nexport default Page;\n\nvar _c;\n\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"sources":["/Users/riya/Downloads/VSCode Projects/graphql_practice/client/src/components/Page.jsx"],"names":["React","useQuery","gql","useMutation","Page","data","loading","error","variables","id","commentsData","mutateFunction","mutationData","comment","author","handleMutate","console","log","getComments","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,WAAxB,QAA2C,gBAA3C;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BN,QAAQ,CAACC,GAAI;AAClD;AACA;AACA;AACA;AACA,MAL6C,EAKtC;AAACM,IAAAA,SAAS,EAAE;AACXC,MAAAA,EAAE,EAAE;AADO;AAAZ,GALsC,CAAzC;AAQA,QAAM;AAAEJ,IAAAA,IAAI,EAAEK;AAAR,MAAyBT,QAAQ,CAACC,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA,MAN2C,EAMpC;AAACM,IAAAA,SAAS,EAAE;AAAZ,GANoC,CAAvC;AASA,QAAM,CAACG,cAAD,EAAiB;AAAEN,IAAAA,IAAI,EAAEO;AAAR,GAAjB,IAA2CT,WAAW,CAACD,GAAI;AACrE;AACA;AACA;AACA;AACA;AACA,MANgE,EAMzD;AAACM,IAAAA,SAAS,EAAE;AACfK,MAAAA,OAAO,EAAE,IADM;AAEfC,MAAAA,MAAM,EAAE;AAFO;AAAZ,GANyD,CAA5D;;AAWA,QAAMC,YAAY,GAAG,MAAM;AACvBJ,IAAAA,cAAc,CAAC;AAACH,MAAAA,SAAS,EAAE;AACvBK,QAAAA,OAAO,EAAE,mBADc;AAEvBC,QAAAA,MAAM,EAAE;AAFe;AAAZ,KAAD,CAAd;AAIH,GALD;;AAOAE,EAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ,aAAYA,YAAZ,uBAAYA,YAAY,CAAEQ,WAA1B,EApCe,CAuCf;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;;AAEA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAA,sBAAOR,YAAP,aAAOA,YAAP,uBAAOA,YAAY,CAAEQ,WAAd,CAA0B,CAA1B,EAA6BJ,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKK,IAAI,CAACC,SAAL,CAAeV,YAAf,CAJL,eAKI;AAAQ,MAAA,OAAO,EAAEK;AAAjB;AAAA;AAAA;AAAA;AAAA,YALJ,EAMKI,IAAI,CAACC,SAAL,CAAeR,YAAf,CANL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CA/DD;;GAAMR,I;UAC+BH,Q,EAQFA,Q,EASkBE,W;;;KAlB/CC,I;AAiEN,eAAeA,IAAf","sourcesContent":["import React from 'react'\nimport { useQuery, gql, useMutation } from '@apollo/client';\n\nconst Page = () => {\n    const { data, loading, error } = useQuery(gql`\n        query getComment($id: ID!){\n            getComment(id: $id){\n                comment\n            }\n    }`,{variables: {\n        id: \"2\"\n    }})\n    const { data: commentsData } = useQuery(gql`\n    query getComments{\n        getComments {\n            author\n            comment\n        }\n    }`,{variables: {\n\n    }})\n    const [mutateFunction, { data: mutationData }] = useMutation(gql`\n        mutation createComment($comment: String,  $author: String){\n            createComment(commentInput: {comment: $comment, author: $author}){\n                author\n                comment\n            }\n    }`,{variables: {\n    comment: \"hi\",\n    author: \"Riya\"\n}})\n\n    const handleMutate = () => {\n        mutateFunction({variables: {\n            comment: \"this is a comment\",\n            author: \"Riya\"\n        }})\n    }\n\n    console.log(commentsData?.getComments)\n\n  \n    // const displayAuthor = () => {\n    //     console.log('test')\n    //     return <h1> ajdsfhskdjf</h1>\n    //     // for (let index = 0; index < commentsData?.getComments.length; index++) {\n    //     //     <h4> {commentsData?.getComments[index].author} </h4>\n    //     // }\n\n    // }\n\n   \n\n    // console.log(commentsData.comment)\n    // console.log(commentsData.author)\n\n    return (\n        <div>\n            <h2>Comments</h2>\n            \n            <h4> { commentsData?.getComments[1].author} </h4>\n            {JSON.stringify(commentsData)}\n            <button onClick={handleMutate}></button>\n            {JSON.stringify(mutationData)}\n        </div>\n    )\n}\n\nexport default Page\n"]},"metadata":{},"sourceType":"module"}