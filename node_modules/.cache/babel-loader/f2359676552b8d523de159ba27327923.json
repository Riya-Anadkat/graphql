{"ast":null,"code":"var _jsxFileName = \"/Users/riya/Downloads/VSCode Projects/graphql_practice/client/src/components/Page.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Page = () => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(gql`\n        query getComment($id: ID!){\n            getComment(id: $id){\n                comment\n            }\n    }`, {\n    variables: {\n      id: \"2\"\n    }\n  });\n  const {\n    data: commentsData\n  } = useQuery(gql`\n    query getComments{\n        getComments {\n            author\n            comment\n        }\n    }`, {\n    variables: {}\n  });\n  const [mutateFunction, {\n    data: mutationData\n  }] = useMutation(gql`\n        mutation createComment($comment: String,  $author: String){\n            createComment(commentInput: {comment: $comment, author: $author}){\n                author\n                comment\n            }\n    }`, {\n    variables: {\n      comment: \"hi\",\n      author: \"Riya\"\n    }\n  });\n\n  const handleMutate = () => {\n    mutateFunction({\n      variables: {\n        comment: \"this is a comment\",\n        author: \"Anonymous user\"\n      }\n    });\n  };\n\n  console.log(commentsData === null || commentsData === void 0 ? void 0 : commentsData.getComments);\n  let commentValue;\n\n  const DisplayComments = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: commentsData === null || commentsData === void 0 ? void 0 : commentsData.getComments.map(commentData => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\" \", commentData.author, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\" \", commentData.comment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 8\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DisplayComments, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMutate,\n      children: \" Add comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), JSON.stringify(mutationData)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Page, \"t2eNIqR4pZMQrT3/3tYQ5QSwMmk=\", false, function () {\n  return [useQuery, useQuery, useMutation];\n});\n\n_c = Page;\nexport default Page;\n\nvar _c;\n\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"sources":["/Users/riya/Downloads/VSCode Projects/graphql_practice/client/src/components/Page.jsx"],"names":["React","useQuery","gql","useMutation","Page","data","loading","error","variables","id","commentsData","mutateFunction","mutationData","comment","author","handleMutate","console","log","getComments","commentValue","DisplayComments","map","commentData","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,WAAxB,QAA2C,gBAA3C;AACA,OAAO,cAAP;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BN,QAAQ,CAACC,GAAI;AAClD;AACA;AACA;AACA;AACA,MAL6C,EAKtC;AAACM,IAAAA,SAAS,EAAE;AACXC,MAAAA,EAAE,EAAE;AADO;AAAZ,GALsC,CAAzC;AAQA,QAAM;AAAEJ,IAAAA,IAAI,EAAEK;AAAR,MAAyBT,QAAQ,CAACC,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA,MAN2C,EAMpC;AAACM,IAAAA,SAAS,EAAE;AAAZ,GANoC,CAAvC;AASA,QAAM,CAACG,cAAD,EAAiB;AAAEN,IAAAA,IAAI,EAAEO;AAAR,GAAjB,IAA2CT,WAAW,CAACD,GAAI;AACrE;AACA;AACA;AACA;AACA;AACA,MANgE,EAMzD;AAACM,IAAAA,SAAS,EAAE;AACfK,MAAAA,OAAO,EAAE,IADM;AAEfC,MAAAA,MAAM,EAAE;AAFO;AAAZ,GANyD,CAA5D;;AAWA,QAAMC,YAAY,GAAG,MAAM;AACvBJ,IAAAA,cAAc,CAAC;AAACH,MAAAA,SAAS,EAAE;AACvBK,QAAAA,OAAO,EAAE,mBADc;AAEvBC,QAAAA,MAAM,EAAE;AAFe;AAAZ,KAAD,CAAd;AAIH,GALD;;AAOAE,EAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ,aAAYA,YAAZ,uBAAYA,YAAY,CAAEQ,WAA1B;AAEA,MAAIC,YAAJ;;AAED,QAAMC,eAAe,GAAG,MAAM;AAC7B,wBACG;AAAA,gBACMV,YADN,aACMA,YADN,uBACMA,YAAY,CAAEQ,WAAd,CAA0BG,GAA1B,CAA+BC,WAAD,iBAC3B;AAAA,gCACA;AAAA,0BAAMA,WAAW,CAACR,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAA,0BAAMQ,WAAW,CAACT,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH;AADN;AAAA;AAAA;AAAA;AAAA,YADH;AAUC,GAXF;;AAaC,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK;AAAxB;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAQ,MAAA,OAAO,EAAEE,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,EAKKQ,IAAI,CAACC,SAAL,CAAeZ,YAAf,CALL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA9DD;;GAAMR,I;UAC+BH,Q,EAQFA,Q,EASkBE,W;;;KAlB/CC,I;AAgEN,eAAeA,IAAf","sourcesContent":["import React from 'react'\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport './styles.css'\n\nconst Page = () => {\n    const { data, loading, error } = useQuery(gql`\n        query getComment($id: ID!){\n            getComment(id: $id){\n                comment\n            }\n    }`,{variables: {\n        id: \"2\"\n    }})\n    const { data: commentsData } = useQuery(gql`\n    query getComments{\n        getComments {\n            author\n            comment\n        }\n    }`,{variables: {\n\n    }})\n    const [mutateFunction, { data: mutationData }] = useMutation(gql`\n        mutation createComment($comment: String,  $author: String){\n            createComment(commentInput: {comment: $comment, author: $author}){\n                author\n                comment\n            }\n    }`,{variables: {\n    comment: \"hi\",\n    author: \"Riya\"\n}})\n\n    const handleMutate = () => {\n        mutateFunction({variables: {\n            comment: \"this is a comment\",\n            author: \"Anonymous user\"\n        }})\n    }\n\n    console.log(commentsData?.getComments)\n\n    let commentValue;\n\n   const DisplayComments = () => {\n    return (\n       <div>\n            {commentsData?.getComments.map((commentData) => (\n                <div>\n                <h5> {commentData.author}: </h5>\n                <h5> {commentData.comment}</h5>\n                </div>\n            ))}\n       </div>\n       )\n    }\n     \n    return (\n        <div>\n            <h2>Comments</h2>\n            <DisplayComments />\n            <input type=\"text\" value></input>\n            <button onClick={handleMutate}> Add comment</button>\n            {JSON.stringify(mutationData)}\n        </div>\n    )\n}\n\nexport default Page\n"]},"metadata":{},"sourceType":"module"}