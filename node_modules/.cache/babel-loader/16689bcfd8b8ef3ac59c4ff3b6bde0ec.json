{"ast":null,"code":"var _jsxFileName = \"/Users/riya/Downloads/VSCode Projects/graphql_practice/client/src/components/TopicPage/TopicPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport { TrashFill } from 'react-bootstrap-icons';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TopicPage = ({\n  currentUser\n}) => {\n  _s();\n\n  const [commentValue, setCommentValue] = useState(\"\");\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(gql`\n        query getComment($id: ID!){\n            getComment(id: $id){\n                comment\n            }\n    }`, {\n    variables: {\n      id: \"2\"\n    }\n  });\n  const {\n    data: commentsData,\n    refetch\n  } = useQuery(gql`\n    query getComments{\n        getComments {\n            author\n            comment\n            id\n        }\n    }`, {\n    variables: {}\n  });\n  const [mutateFunction] = useMutation(gql`\n        mutation createComment($comment: String,  $author: String){\n            createComment(commentInput: {comment: $comment, author: $author}){\n                author\n                comment\n            }\n    }`);\n  const [deleteCommentFunction, {\n    data: deleteCommentData\n  }] = useMutation(gql`\n        mutation deleteComment($id: ID!){\n            deleteComment(id: $id)\n        }\n    `);\n\n  const handleMutate = () => {\n    mutateFunction({\n      variables: {\n        comment: commentValue,\n        author: currentUser ? currentUser : \"Anonymous user\"\n      }\n    });\n    setCommentValue(\"\");\n    refetch();\n  };\n\n  const handleTextChange = ({\n    target: {\n      value\n    }\n  }) => {\n    setCommentValue(value);\n  };\n\n  const handleDeleteComment = id => {\n    deleteCommentFunction({\n      variables: {\n        id: id\n      }\n    });\n    refetch();\n  };\n\n  const DisplayComments = () => {\n    const DisplayTrash = (author, user) => {\n      if (author === currentUser) {\n        return /*#__PURE__*/_jsxDEV(TrashFill, {\n          onClick: () => handleDeleteComment(commentData.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 20\n        }, this);\n      }\n\n      return null;\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: commentsData === null || commentsData === void 0 ? void 0 : commentsData.getComments.map(commentData => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"userName\",\n          children: [\" \", commentData.author, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"comment\",\n          children: [\" \", commentData.comment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TrashFill, {\n          onClick: () => handleDeleteComment(commentData.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this), displayTrash(commentData.author, currentUser)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 8\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"heading\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: commentValue,\n      onChange: handleTextChange,\n      className: \"commentInputField\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMutate,\n      className: \"addCommentButton\",\n      children: \" Add comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DisplayComments, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TopicPage, \"5I3Tu7aS2FAaGDSkmtKbecaQumo=\", false, function () {\n  return [useQuery, useQuery, useMutation, useMutation];\n});\n\n_c = TopicPage;\nexport default TopicPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopicPage\");","map":{"version":3,"sources":["/Users/riya/Downloads/VSCode Projects/graphql_practice/client/src/components/TopicPage/TopicPage.jsx"],"names":["React","useState","useQuery","gql","useMutation","TrashFill","TopicPage","currentUser","commentValue","setCommentValue","data","loading","error","variables","id","commentsData","refetch","mutateFunction","deleteCommentFunction","deleteCommentData","handleMutate","comment","author","handleTextChange","target","value","handleDeleteComment","DisplayComments","DisplayTrash","user","commentData","getComments","map","displayTrash"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport { TrashFill } from 'react-bootstrap-icons';\nimport './styles.css'\n\nconst TopicPage = ({currentUser}) => {\n    const [ commentValue , setCommentValue ] = useState(\"\");\n\n    const { data, loading, error } = useQuery(gql`\n        query getComment($id: ID!){\n            getComment(id: $id){\n                comment\n            }\n    }`,{variables: {\n        id: \"2\"\n    }})\n    const { data: commentsData, refetch} = useQuery(gql`\n    query getComments{\n        getComments {\n            author\n            comment\n            id\n        }\n    }`,{variables: {\n\n    }})\n    const [mutateFunction] = useMutation(gql`\n        mutation createComment($comment: String,  $author: String){\n            createComment(commentInput: {comment: $comment, author: $author}){\n                author\n                comment\n            }\n    }`)\n\n    const [deleteCommentFunction, {data: deleteCommentData}] = useMutation(gql`\n        mutation deleteComment($id: ID!){\n            deleteComment(id: $id)\n        }\n    `)\n\n    const handleMutate = () => {\n        mutateFunction({variables: {\n            comment: commentValue,\n            author: currentUser ? currentUser : \"Anonymous user\"\n        }})\n        setCommentValue(\"\")\n        refetch();\n    }\n\n    const handleTextChange = ({ target: { value } }) => {\n        setCommentValue(value)\n    };\n\n    const handleDeleteComment = (id) => {\n        deleteCommentFunction({variables: {\n            id: id\n        }});\n        refetch();\n    }\n\n   const DisplayComments = () => {\n\n    const DisplayTrash = (author, user) => {\n        if (author === currentUser) {\n            return <TrashFill onClick={() => handleDeleteComment(commentData.id)}/>\n        }\n        return null;\n    }\n    return (\n       <div>\n            {commentsData?.getComments.map((commentData) => (\n                <div>\n                <h5 className=\"userName\"> {commentData.author}: </h5>\n                <h5 className=\"comment\"> {commentData.comment}</h5>\n                <TrashFill onClick={() => handleDeleteComment(commentData.id)}/>\n                {displayTrash(commentData.author, currentUser)}\n                </div>\n            ))}\n       </div>\n       )\n    }\n     \n    return (\n        <div>\n            <h2 className=\"heading\" >Comments</h2>\n            <input type=\"text\" value={commentValue} onChange={handleTextChange} className=\"commentInputField\" ></input>\n            <button onClick={handleMutate} className=\"addCommentButton\"> Add comment</button>\n            <DisplayComments />\n        </div>\n    )\n}\n\nexport default TopicPage\n"]},"metadata":{},"sourceType":"module"}