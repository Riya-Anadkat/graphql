{"ast":null,"code":"var _jsxFileName = \"/Users/riya/Downloads/VSCode Projects/graphql_practice/client/src/components/Page.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Page = () => {\n  _s();\n\n  const [commentValue, setCommentValue] = useState(\"\");\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(gql`\n        query getComment($id: ID!){\n            getComment(id: $id){\n                comment\n            }\n    }`, {\n    variables: {\n      id: \"2\"\n    }\n  });\n  const {\n    data: commentsData,\n    refetch\n  } = useQuery(gql`\n    query getComments{\n        getComments {\n            author\n            comment\n        }\n    }`, {\n    variables: {}\n  });\n  const [mutateFunction] = useMutation(gql`\n        mutation createComment($comment: String,  $author: String){\n            createComment(commentInput: {comment: $comment, author: $author}){\n                author\n                comment\n            }\n    }`);\n\n  const handleMutate = () => {\n    mutateFunction({\n      variables: {\n        comment: commentValue,\n        author: \"Anonymous user\"\n      }\n    });\n    setCommentValue(\"\");\n  };\n\n  const handleTextChange = ({\n    target: {\n      value\n    }\n  }) => {\n    setCommentValue(value);\n  };\n\n  const DisplayComments = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: commentsData === null || commentsData === void 0 ? void 0 : commentsData.getComments.map(commentData => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\" \", commentData.author, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\" \", commentData.comment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 8\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: commentValue,\n      onChange: handleTextChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMutate,\n      children: \" Add comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DisplayComments, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Page, \"nw5v7+YRd9tKhmsaQwnvZI1wZ8s=\", false, function () {\n  return [useQuery, useQuery, useMutation];\n});\n\n_c = Page;\nexport default Page;\n\nvar _c;\n\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"sources":["/Users/riya/Downloads/VSCode Projects/graphql_practice/client/src/components/Page.jsx"],"names":["React","useState","useQuery","gql","useMutation","Page","commentValue","setCommentValue","data","loading","error","variables","id","commentsData","refetch","mutateFunction","handleMutate","comment","author","handleTextChange","target","value","DisplayComments","getComments","map","commentData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,WAAxB,QAA2C,gBAA3C;AACA,OAAO,cAAP;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM,CAAEC,YAAF,EAAiBC,eAAjB,IAAqCN,QAAQ,CAAC,EAAD,CAAnD;AAEA,QAAM;AAAEO,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BR,QAAQ,CAACC,GAAI;AAClD;AACA;AACA;AACA;AACA,MAL6C,EAKtC;AAACQ,IAAAA,SAAS,EAAE;AACXC,MAAAA,EAAE,EAAE;AADO;AAAZ,GALsC,CAAzC;AAQA,QAAM;AAAEJ,IAAAA,IAAI,EAAEK,YAAR;AAAsBC,IAAAA;AAAtB,MAAiCZ,QAAQ,CAACC,GAAI;AACxD;AACA;AACA;AACA;AACA;AACA,MANmD,EAM5C;AAACQ,IAAAA,SAAS,EAAE;AAAZ,GAN4C,CAA/C;AASA,QAAM,CAACI,cAAD,IAAmBX,WAAW,CAACD,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA,MANwC,CAApC;;AAQA,QAAMa,YAAY,GAAG,MAAM;AACvBD,IAAAA,cAAc,CAAC;AAACJ,MAAAA,SAAS,EAAE;AACvBM,QAAAA,OAAO,EAAEX,YADc;AAEvBY,QAAAA,MAAM,EAAE;AAFe;AAAZ,KAAD,CAAd;AAIAX,IAAAA,eAAe,CAAC,EAAD,CAAf;AACH,GAND;;AAQA,QAAMY,gBAAgB,GAAG,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,GAAD,KAA2B;AAChDd,IAAAA,eAAe,CAACc,KAAD,CAAf;AACH,GAFD;;AAID,QAAMC,eAAe,GAAG,MAAM;AAC7B,wBACG;AAAA,gBACMT,YADN,aACMA,YADN,uBACMA,YAAY,CAAEU,WAAd,CAA0BC,GAA1B,CAA+BC,WAAD,iBAC3B;AAAA,gCACA;AAAA,0BAAMA,WAAW,CAACP,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAA,0BAAMO,WAAW,CAACR,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH;AADN;AAAA;AAAA;AAAA;AAAA,YADH;AAUC,GAXF;;AAaC,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAEX,YAA1B;AAAwC,MAAA,QAAQ,EAAEa;AAAlD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAEH,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA7DD;;GAAMX,I;UAG+BH,Q,EAQMA,Q,EASdE,W;;;KApBvBC,I;AA+DN,eAAeA,IAAf","sourcesContent":["import React, {useState} from 'react'\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport './styles.css'\n\nconst Page = () => {\n    const [ commentValue , setCommentValue ] = useState(\"\");\n\n    const { data, loading, error } = useQuery(gql`\n        query getComment($id: ID!){\n            getComment(id: $id){\n                comment\n            }\n    }`,{variables: {\n        id: \"2\"\n    }})\n    const { data: commentsData, refetch} = useQuery(gql`\n    query getComments{\n        getComments {\n            author\n            comment\n        }\n    }`,{variables: {\n\n    }})\n    const [mutateFunction] = useMutation(gql`\n        mutation createComment($comment: String,  $author: String){\n            createComment(commentInput: {comment: $comment, author: $author}){\n                author\n                comment\n            }\n    }`)\n\n    const handleMutate = () => {\n        mutateFunction({variables: {\n            comment: commentValue,\n            author: \"Anonymous user\"\n        }})\n        setCommentValue(\"\")\n    }\n\n    const handleTextChange = ({ target: { value } }) => {\n        setCommentValue(value)\n    };\n\n   const DisplayComments = () => {\n    return (\n       <div>\n            {commentsData?.getComments.map((commentData) => (\n                <div>\n                <h5> {commentData.author}: </h5>\n                <h5> {commentData.comment}</h5>\n                </div>\n            ))}\n       </div>\n       )\n    }\n     \n    return (\n        <div>\n            <h2>Comments</h2>\n            <input type=\"text\" value={commentValue} onChange={handleTextChange}></input>\n            <button onClick={handleMutate}> Add comment</button>\n            <DisplayComments />\n        </div>\n    )\n}\n\nexport default Page\n"]},"metadata":{},"sourceType":"module"}